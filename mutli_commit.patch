From a926fa7e8ad2ea75871e274ef1b4d36035520792 Mon Sep 17 00:00:00 2001
From: SamTucker561 <55509480+SamTucker561@users.noreply.github.com>
Date: Thu, 23 Nov 2023 17:12:08 +0000
Subject: [PATCH 1/5] Update App.tsx

---
 src/App.tsx | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..af762f0 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: Boolean
 }
 
 /**
-- 
2.43.0.windows.1


From 0b96a303ce749e69b4ca0bc910862018497c3ea1 Mon Sep 17 00:00:00 2001
From: SamTucker561 <55509480+SamTucker561@users.noreply.github.com>
Date: Thu, 23 Nov 2023 17:36:08 +0000
Subject: [PATCH 2/5] pt2

---
 src/App.tsx   | 21 ++++++++++++++++-----
 src/Graph.tsx |  4 ++--
 2 files changed, 18 insertions(+), 7 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index af762f0..58f5a18 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -23,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -30,18 +31,28 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if (this.state.showGraph){
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let i = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({ 
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      i+=1;
+      if (i>1000){
+        clearInterval(interval)
+      }
+    }, 100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..dffa38f 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem: document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
-- 
2.43.0.windows.1


From a94c5a4eea2ee1c09a7fec8a9add2d2e52907c4e Mon Sep 17 00:00:00 2001
From: SamTucker561 <55509480+SamTucker561@users.noreply.github.com>
Date: Thu, 23 Nov 2023 18:46:49 +0000
Subject: [PATCH 3/5] pt3

---
 src/App.tsx   | 4 ++--
 src/Graph.tsx | 8 +++++++-
 2 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 58f5a18..c48b33f 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,7 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
-  showGraph: Boolean
+  showGraph: Boolean,
 }
 
 /**
@@ -32,7 +32,7 @@ class App extends Component<{}, IState> {
    */
   renderGraph() {
     if (this.state.showGraph){
-    return (<Graph data={this.state.data}/>)
+      return (<Graph data={this.state.data}/>)
     }
   }
 
diff --git a/src/Graph.tsx b/src/Graph.tsx
index dffa38f..e01e310 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,12 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y-line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates',
+      '{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
     }
   }
 
-- 
2.43.0.windows.1


From 614707f78a171c33a4a70fc5e8a50b9d6e91c3f7 Mon Sep 17 00:00:00 2001
From: SamTucker561 <55509480+SamTucker561@users.noreply.github.com>
Date: Thu, 23 Nov 2023 18:56:46 +0000
Subject: [PATCH 4/5] pt4

---
 src/Graph.tsx | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/Graph.tsx b/src/Graph.tsx
index e01e310..fe17755 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -53,8 +53,11 @@ class Graph extends Component<IProps, {}> {
       elem.setAttribute('column-pivots','["stock"]');
       elem.setAttribute('row-pivots','["timestamp"]');
       elem.setAttribute('columns','["top_ask_price"]');
-      elem.setAttribute('aggregates',
-      '{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}');
+      elem.setAttribute('aggregates',`
+        {"stock":"distinct count",
+        "top_ask_price":"avg",
+        "top_bid_price":"avg",
+        "timestamp":"distinct count"}`);
     }
   }
 
-- 
2.43.0.windows.1


From 7887f15850887d6093478ba043a65acbdb78ca52 Mon Sep 17 00:00:00 2001
From: SamTucker561 <55509480+SamTucker561@users.noreply.github.com>
Date: Thu, 23 Nov 2023 19:15:23 +0000
Subject: [PATCH 5/5] final

---
 src/Graph.tsx | 100 +++++++++++++++++++++++++-------------------------
 1 file changed, 49 insertions(+), 51 deletions(-)

diff --git a/src/Graph.tsx b/src/Graph.tsx
index fe17755..2b0cb17 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,13 +1,13 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
+import React, {Component} from 'react';
+import {Table} from '@finos/perspective';
+import {ServerRespond} from './DataStreamer';
 import './Graph.css';
 
 /**
  * Props declaration for <Graph />
  */
 interface IProps {
-  data: ServerRespond[],
+    data: ServerRespond[],
 }
 
 /**
@@ -15,7 +15,7 @@ interface IProps {
  * This interface acts as a wrapper for Typescript compiler.
  */
 interface PerspectiveViewerElement extends HTMLElement {
-  load: (table: Table) => void,
+    load: (table: Table) => void,
 }
 
 /**
@@ -23,60 +23,58 @@ interface PerspectiveViewerElement extends HTMLElement {
  * parsed from its parent through data property.
  */
 class Graph extends Component<IProps, {}> {
-  // Perspective table
-  table: Table | undefined;
+    // Perspective table
+    table: Table | undefined;
 
-  render() {
-    return React.createElement('perspective-viewer');
-  }
+    render() {
+        return React.createElement('perspective-viewer');
+    }
 
-  componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    componentDidMount() {
+        // Get element to attach the table from the DOM.
+        const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
-    const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
+        const schema = {
+            stock: 'string',
+            top_ask_price: 'float',
+            top_bid_price: 'float',
+            timestamp: 'date',
+        };
 
-    if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
-    }
-    if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
+        if (window.perspective && window.perspective.worker()) {
+            this.table = window.perspective.worker().table(schema);
+        }
+        if (this.table) {
+            // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
-      elem.load(this.table);
-      elem.setAttribute('view','y-line');
-      elem.setAttribute('column-pivots','["stock"]');
-      elem.setAttribute('row-pivots','["timestamp"]');
-      elem.setAttribute('columns','["top_ask_price"]');
-      elem.setAttribute('aggregates',`
-        {"stock":"distinct count",
-        "top_ask_price":"avg",
-        "top_bid_price":"avg",
-        "timestamp":"distinct count"}`);
+            // Add more Perspective configurations here.
+            elem.load(this.table);
+            elem.setAttribute("view", "y_line");
+            elem.setAttribute("column-pivots", '["stock"]');
+            elem.setAttribute("row_pivots", '["timestamp"]');
+            elem.setAttribute("columns", '["top_ask_price"]');
+            elem.setAttribute("aggregates",
+                '{"stock":"distinct_count", "top_ask_price":"avg", "top_bid_price":"avg", "timestamp":"distinct_count"}'
+            );
+        }
     }
-  }
 
-  componentDidUpdate() {
-    // Everytime the data props is updated, insert the data into Perspective table
-    if (this.table) {
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+    componentDidUpdate() {
+        // Everytime the data props is updated, insert the data into Perspective table
+        if (this.table) {
+            // As part of the task, you need to fix the way we update the data props to
+            // avoid inserting duplicated entries into Perspective table again.
+            this.table.update(this.props.data.map((el: any) => {
+                // Format the data from ServerRespond to the schema
+                return {
+                    stock: el.stock,
+                    top_ask_price: el.top_ask && el.top_ask.price || 0,
+                    top_bid_price: el.top_bid && el.top_bid.price || 0,
+                    timestamp: el.timestamp,
+                };
+            }));
+        }
     }
-  }
 }
 
 export default Graph;
-- 
2.43.0.windows.1

